---
.test_script_sched_template: &test_script_sched
  stage: test
  tags: ["large", "docker"]
  script:
    - export LOGNAME=pastix-${VERSION}-${RUN}-sched${SCHED}
    - source install-${VERSION}/bin/pastix_env.sh
    - (cd build &&
       eval "ctest --nocompress-output
             -R \"^${RUN}_.*_sched${SCHED}\"
             -T Test
             --output-junit ../${LOGNAME}.junit
             | tee -a ../${LOGNAME}.log")
    - gcovr --xml-pretty --exclude-unreachable-branches --print-summary -o ${LOGNAME}.cov --root ${CI_PROJECT_DIR}
    - lcov --directory build --capture --output-file ${LOGNAME}.lcov
    - cp ${LOGNAME}.junit junit.xml
    - cp ${LOGNAME}.cov coverage.xml
  coverage: /^\s*lines:\s*\d+.\d+\%/
  artifacts:
    name: "$CI_JOB_NAME-$CI_COMMIT_REF_SLUG"
    expire_in: 2 days
    untracked: true
    when: always
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
      junit: junit.xml

.test_script_sched_template_seq: &test_script_sched_seq
  extends:
    - .test_script_sched_template
    - .only-branches-seq

.test_script_sched_template_mpi: &test_script_sched_mpi
  extends:
    - .test_script_sched_template
    - .only-branches-mpi

test_seq_sched:
  variables:
    VERSION: seq
  needs: [build_pastix_seq]
  parallel:
    matrix:
      - SCHED: [0, 1, 2, 3, 4]
        RUN: shm
  dependencies:
    - build_pastix_seq
  <<: *test_script_sched_seq

test_mpi_sched:
  variables:
    VERSION: mpi
  needs: [build_pastix_mpi]
  parallel:
    matrix:
      - SCHED: [0, 1, 4]
        RUN: [shm, mpi_rep, mpi_dst]
      - SCHED: [2, 3]
        RUN: [shm, mpi_rep]
  dependencies:
    - build_pastix_mpi
  <<: *test_script_sched_mpi
