---
.test_script_wrapper_template: &test_script_wrapper
  stage: test
  tags: ["large", "docker"]
  artifacts:
    name: pastix_test_${VERSION}_${WRAPPER}
    expire_in: 180 minutes
    paths:
      - pastix-${VERSION}-${WRAPPER}.lcov
      - pastix-gcov-${VERSION}-${WRAPPER}.log
  script:
    - export LOGNAME=pastix-${VERSION}-${WRAPPER}
    - source install-${VERSION}/bin/pastix_env.sh
    - (cd build &&
       eval "ctest --nocompress-output
             -E \"sched\" -R \"^${WRAPPER}_\"
             -T Test
             --output-junit ${CI_PROJECT_DIR}/${LOGNAME}.junit
             | tee -a ${CI_PROJECT_DIR}/${LOGNAME}.log")
    - gcovr --xml-pretty --exclude-unreachable-branches --print-summary -o ${CI_PROJECT_DIR}/${LOGNAME}.cov --root ${CI_PROJECT_DIR}
    - lcov --directory build --capture --output-file ${LOGNAME}.lcov
    - cp ${LOGNAME}.junit junit.xml
    - cp ${LOGNAME}.cov coverage.xml
  coverage: /^\s*lines:\s*\d+.\d+\%/
  artifacts:
    name: "$CI_JOB_NAME-$CI_COMMIT_REF_SLUG"
    expire_in: 2 days
    untracked: true
    when: always
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
      junit: junit.xml

.test_script_wrapper_template_seq: &test_script_wrapper_seq
  extends:
    - .test_script_wrapper_template
    - .only-branches-seq

.test_script_wrapper_template_mpi: &test_script_wrapper_mpi
  extends:
    - .test_script_wrapper_template
    - .only-branches-mpi

test_seq_wrapper:
  variables:
    VERSION: seq
  needs: [build_pastix_seq]
  parallel:
    matrix:
      - WRAPPER: [python, fortran]
  dependencies:
    - build_pastix_seq
  <<: *test_script_wrapper_seq

test_mpi_wrapper:
  variables:
    VERSION: mpi
  needs: [build_pastix_mpi]
  parallel:
    matrix:
      - WRAPPER: [python, fortran]
  dependencies:
    - build_pastix_mpi
  <<: *test_script_wrapper_mpi

test_seq:
  variables:
    VERSION: seq
  needs: [build_pastix_seq]
  parallel:
    matrix:
      - WRAPPER: [c, bcsc, lr]
  dependencies:
    - build_pastix_seq
  <<: *test_script_wrapper_seq

test_mpi:
  variables:
    VERSION: mpi
  needs: [build_pastix_mpi]
  parallel:
    matrix:
      - WRAPPER: [c, bcsc, lr]
  dependencies:
    - build_pastix_mpi
  <<: *test_script_wrapper_mpi
