#!/usr/bin/perl

use strict;
use List::MoreUtils qw{ any };

# Convert all normal precision files, not mixed
my @files  = `ls -1 core_z*.c core_dzasum.c | grep -v zlag2c`;
my $output = "../core_blas-eztrace/coreblas_z.c";
my @complexlist = qw( core_zhemm.c  core_zherk.c core_zher2k.c
                      core_zlanhe.c core_zplghe.c core_zhessq.c );

my @avoidlist = qw( core_zlag2c.c core_zgetf2.c core_zlarfb2.c
                    core_ztrbmm.c core_ztrgmm.c
                    core_zgetro.c core_ztitro.c );
#my $codegen = "../tools/codegen.py";

my $coreblas_classic = "";
my $coreblas_quark   = "";

sub ParseCore {

    my ($file) = @_ ;
    my $iscomplex = 0;

    open(M, $file);

    if ( any { $_ eq $file} @complexlist ) {
        $iscomplex = 1;
        $coreblas_quark   .= "#ifdef COMPLEX\n";
        $coreblas_classic .= "#ifdef COMPLEX\n";
    }
    while( )
    {
        my $line = <M>;
        chomp $line;

        if ( $line =~ /^[a-zA-Z0-9_]*[ \*]CORE_.*\(/ &&
             ! ( $line =~ /static/ ) ) {
            # Function name
            my $funcname = $line;
            $funcname =~ s/.*(CORE_.*)\(.*/\1/;

            # short name
            my $shname = $funcname;
            $shname =~ s/CORE_z//; # Suppress z
            $shname =~ s/CORE_dz//;# Case of dzasum or dznrm2
            $shname =~ s/_quark//;
            $shname = uc($shname);

            # type returned
            my $type = $line;
            $type =~ s/^(.+)CORE_.*/\1/;

            #print $funcname."\n";
            #print $shname."\n";
            #print $type."\n";

            # list of arguments
            my $arglist = $line;
            $arglist =~ s/.*CORE_.*\(/(/;

            while ( ! ($line =~ /{/ ) ) {
                $line = <M>;
                chomp $line;
                $arglist .= $line;
            }

            $arglist =~ s/{//;
            $arglist =~ s/[ \t]+/ /g;                           #Remove spaces and tab
            #print $arglist."\n";

            #Short list of argument
            my $sharglist = $arglist;
            $sharglist =~ s/ *\)/)/g; #Remove space between last name and ) to avoid problem in following regexp
            $sharglist =~ s/[^,(]*\s\**([a-zA-Z0-9_]*[,)])/\1 /g; #Remove type
            #print $sharglist."\n";

            if ( $type =~ /void/ ) {
                if ( $funcname =~ /.*_quark/ ) {
                    $coreblas_quark .= "FUNCTION_QUARK( $funcname, $shname )\n";
                } else {
                    $coreblas_classic .= "FUNCTION_VOID( $funcname, $shname, $type,\n          $arglist,\n          $sharglist)\n";
                }
            } else {
                $coreblas_classic .= "FUNCTION_TYPE( $funcname, $shname, $type,\n          $arglist,\n          $sharglist)\n";
            }
        }
        last if eof(M);
    }

    if ($iscomplex == 1) {
        $coreblas_classic .= "#endif\n";
        $coreblas_quark   .= "#endif\n";
    }
    close(M);
}

#################################################################################
#
#                   Main
#
#################################################################################

open(OUTPUT, ">$output");
print OUTPUT '/**                                                               '."\n";
print OUTPUT ' *                                                                '."\n";
print OUTPUT ' * @file coreblas_z.c                                             '."\n";
print OUTPUT ' *                                                                '."\n";
print OUTPUT ' *  PLASMA core_blas tracing kernel                               '."\n";
print OUTPUT ' *  PLASMA is a software package provided by Univ. of Tennessee,  '."\n";
print OUTPUT ' *  Univ. of California Berkeley and Univ. of Colorado Denver     '."\n";
print OUTPUT ' *                                                                '."\n";
print OUTPUT ' *  This file provides the wrapper for each function of the       '."\n";
print OUTPUT ' *  core_blas library which will generate an event before and     '."\n";
print OUTPUT ' *  after the execution of the kernel.                            '."\n";
print OUTPUT ' *  This file is automatically generated with convert2eztrace.pl  '."\n";
print OUTPUT ' *  script.                                                       '."\n";
print OUTPUT ' *                                                                '."\n";
print OUTPUT ' * @version 2.4.6                                                 '."\n";
print OUTPUT ' * @author Mathieu Faverge                                        '."\n";
print OUTPUT ' * @date 2010-11-15                                               '."\n";
print OUTPUT ' * @precisions normal z -> c d s                                  '."\n";
print OUTPUT ' *                                                                '."\n";
print OUTPUT ' **/                                                              '."\n";
print OUTPUT '#include <eztrace.h>           '."\n";
print OUTPUT '#include <ev_codes.h>          '."\n";
print OUTPUT '#include "common.h"            '."\n";
print OUTPUT '#include "coreblas_ev_codes.h" '."\n";
print OUTPUT '#include "coreblas_macros.h"   '."\n";
print OUTPUT '#undef REAL                    '."\n";
print OUTPUT '#define COMPLEX                '."\n";
print OUTPUT "\n";

foreach my $file (@files)
{
    chomp $file;
    if ( any { $_ eq $file} @avoidlist ) {
        next;
    }
    ParseCore( $file );
}

print OUTPUT '/*****************************************************************'."\n";
print OUTPUT ' *        Core functions                                          '."\n";
print OUTPUT ' */'."\n";
print OUTPUT "\n";

print OUTPUT $coreblas_classic;

print OUTPUT "\n";
print OUTPUT '/*****************************************************************'."\n";
print OUTPUT ' *        QUARK Wrapper functions                                 '."\n";
print OUTPUT ' */'."\n";
print OUTPUT "\n";

print OUTPUT $coreblas_quark;

print OUTPUT "\n";
close(OUTPUT);

system("sed -i 's/_P[1-9]F[1-9]//g' $output" ); # Remove _Px
system("sed -i 's/_P[1-9]//g' $output" );       # Remove _Px
system("sed -i 's/_A[1-9]//g' $output" );       # Remove _Ax
system("sed -i 's/_F[1-9]//g' $output" );       # Remove _Fx

# LASET
system("sed -i 's/LASET2/LASET/g' $output" );  #
# LU
system("sed -i 's/GETRF_[A-Z]*/GETRF/g'  $output" ); # GETRF_[INCPIV|RECLAP|RECTIL] and GETRF are using the same code
system("sed -i 's/LASWP_ONTILE/LASWP/g'  $output" ); # LASWP_ONTILE and LASWP are using the same code
system("sed -i 's/LASWPC_ONTILE/LASWP/g' $output" ); # LASWP_ONTILE and LASWP are using the same code
system("sed -i 's/SWPTR_ONTILE/TRSM/g'   $output" ); #
# 2 - sided
system("sed -i 's/_HETRA1//g' $output" );  #
system("sed -i 's/_CORNER//g' $output" );  #
system("sed -i 's/LARFB_GEMM/LARFB/g' $output" );  #
# Groups all norm tasks together
system("sed -i 's/GESSQ/LASSQ/g' $output" );  #
system("sed -i 's/HESSQ/LASSQ/g' $output" );  #
system("sed -i 's/SYSSQ/LASSQ/g' $output" );  #
system("sed -i 's/PLSSQ/LASSQ/g' $output" );  #

#system("python $codegen -f $output" );
