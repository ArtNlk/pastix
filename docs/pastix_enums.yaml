#
# This file allows us to generate:
#      - Documentation files
#      - IPARM/DPARM and their related enums declaration file
#        ( $PASTIX_HOME/include/pastix/api.h )
#      - parse_iparm, parse_dparm and parse_enums implementation and declaration.
#        pastix_ENUM_getstr implementation and declaration.
#        ( $PASTIX_HOME/common/parse_options.[h/c] )
#
# If you want to modify one of these files, please modify this one.
#
###
# SYNTAX documentation. [] are used for optional keys.
#
# ENUM NAME : Name of the enum. Will be declared as pastix_NAME_t.
#   DOC:
#     BRIEF: short description of the enum.
#     [DETAILS]: Elaborate the description. Used for the documentation.(1)
#   VALUES:
#     Value count [int]:
#       NAME: Enum string (Must begin with Pastix...)
#       [VALUE]: To define the value of the enum [int]
#       [BRIEF]: Short description of the impact of this value.
#
# (1) You can find 3 differents example to write your DESCRIPTION correctly
#     in pastix_enums.yaml for fact_mode, solve_mode and task enums
###
---
task:
  DOC:
    BRIEF: Main steps for the pastix() interface.
    DETAILS: 'Those enums are used of the IPARM_START_TASK and IPARM_END_TASK parameters

      that configure the pastix() call.

      '
  VALUES:
    0:
      NAME: PastixTaskInit
      VALUE: '0'
      BRIEF: Startup the library
    1:
      NAME: PastixTaskOrdering
      VALUE: '1'
      BRIEF: Ordering
    2:
      NAME: PastixTaskSymbfact
      VALUE: '2'
      BRIEF: Symbolic factorization
    3:
      NAME: PastixTaskAnalyze
      VALUE: '3'
      BRIEF: Tasks mapping and scheduling
    4:
      NAME: PastixTaskNumfact
      VALUE: '4'
      BRIEF: Numerical factorization
    5:
      NAME: PastixTaskSolve
      VALUE: '5'
      BRIEF: Numerical solve
    6:
      NAME: PastixTaskRefine
      VALUE: '6'
      BRIEF: Numerical refinement
    7:
      NAME: PastixTaskClean
      VALUE: '7'
      BRIEF: Clean
verbose:
  DOC:
    BRIEF: Verbose modes
  VALUES:
    0:
      NAME: PastixVerboseNot
      VALUE: '0'
      BRIEF: Nothing
    1:
      NAME: PastixVerboseNo
      VALUE: '1'
      BRIEF: Default
    2:
      NAME: PastixVerboseYes
      VALUE: '2'
      BRIEF: Extended
io:
  DOC:
    BRIEF: IO strategy for graph and ordering
  VALUES:
    0:
      NAME: PastixIONo
      VALUE: '0'
      BRIEF: No output or input
    1:
      NAME: PastixIOLoad
      VALUE: '1'
      BRIEF: Load ordering and symbol matrix instead of applying symbolic factorization
        step
    2:
      NAME: PastixIOSave
      VALUE: '2'
      BRIEF: Save ordering and symbol matrix after symbolic factorization step
    3:
      NAME: PastixIOLoadGraph
      VALUE: '4'
      BRIEF: Load graph  during ordering step
    4:
      NAME: PastixIOSaveGraph
      VALUE: '8'
      BRIEF: Save graph  during ordering step
    5:
      NAME: PastixIOLoadCSC
      VALUE: '16'
      BRIEF: Load CSC(d) during ordering step
    6:
      NAME: PastixIOSaveCSC
      VALUE: '32'
      BRIEF: Save CSC(d) during ordering step
fact_mode:
  DOC:
    BRIEF: Factorization Schur modes
    DETAILS: "Describe which part of the matrix is factorized or not\n"
  VALUES:
    0:
      NAME: PastixFactModeLocal
      VALUE: '0'
    1:
      NAME: PastixFactModeSchur
      VALUE: '1'
    2:
      NAME: PastixFactModeBoth
      VALUE: '2'
solv_mode:
  DOC:
    BRIEF: Solve Schur modes
    DETAILS: "Describe which part of the solve is applied with the matrix\n\
              \n\
              \\f[ A = \\left( \\begin{array}{cc}\n\
              \            L_{11}U_{11} & U_{12} \\\\\n\
              \            L_{21}       & S_{22} \\end{array} \\right) \\f]\n\
              \n\
              For the lower part (and symmetrically for upper part):\n\
              \  -# Solve \\f[ L_{11} * x_{11} = b_{11} \\f]\n\
              \  -# Apply the update \\f[ b_{22} = b_{22} - L_{21} * b_{11} \\f]\n\
              \  -# Solve the lower part of \\f[ S_{22} * x_{22} = b_{22} \\f] if S22 has been previously factorized.\n\
              \n\
              PastixSolvModeLocal applies only the step 1.\n\
              PastixSolvModeInterface applies steps 1 and 2.\n\
              PastixSolvModeSchur applies all steps.\n"
  VALUES:
    0:
      NAME: PastixSolvModeLocal
      VALUE: '0'
    1:
      NAME: PastixSolvModeInterface
      VALUE: '1'
    2:
      NAME: PastixSolvModeSchur
      VALUE: '2'
refine:
  DOC:
    BRIEF: Iterative refinement algorithms
  VALUES:
    0:
      NAME: PastixRefineGMRES
      BRIEF: GMRES
    1:
      NAME: PastixRefineCG
      BRIEF: Conjugate Gradient
    2:
      NAME: PastixRefineSR
      BRIEF: Simple refinement
    3:
      NAME: PastixRefineBiCGSTAB
      BRIEF: BiCGStab
coeftype:
  DOC:
    BRIEF: Arithmetic types.
    DETAILS: 'This describes the different arithmetics that can be stored in a sparse
      matrix.

      @remark The values start at 2 for compatibility purpose with PLASMA and

      DPLASMA libraries, and they match the ones used in spm.


      @sa spm_coeftype_t


      @{

      '
  VALUES:
    0:
      NAME: PastixPattern
      VALUE: SpmPattern
    1:
      NAME: PastixFloat
      VALUE: SpmFloat
    2:
      NAME: PastixDouble
      VALUE: SpmDouble
    3:
      NAME: PastixComplex32
      VALUE: SpmComplex32
    4:
      NAME: PastixComplex64
      VALUE: SpmComplex64
factotype:
  DOC:
    BRIEF: Factorization algorithms available for IPARM_FACTORIZATION parameter
  VALUES:
    0:
      NAME: PastixFactPOTRF
      VALUE: '0'
      BRIEF: Cholesky factorization
    1:
      NAME: PastixFactSYTRF
      VALUE: '1'
      BRIEF: LDL^t factorization
    2:
      NAME: PastixFactGETRF
      VALUE: '2'
      BRIEF: LU factorization
    3:
      NAME: PastixFactPXTRF
      VALUE: '3'
      BRIEF: LL^t factorization for complex matrices
    4:
      NAME: PastixFactHETRF
      VALUE: '4'
      BRIEF: LDL^h factorization for complex matrices
    5:
      NAME: PastixFactLLH
      VALUE: '0'
      BRIEF: LL^h factorization for complex matrices
    6:
      NAME: PastixFactLDLT
      VALUE: '1'
      BRIEF: LDL^t factorization
    7:
      NAME: PastixFactLU
      VALUE: '2'
      BRIEF: LU factorization
    8:
      NAME: PastixFactLLT
      VALUE: '3'
      BRIEF: LL^t factorization
    9:
      NAME: PastixFactLDLH
      VALUE: '4'
      BRIEF: LDL^h factorization for complex matrices
scheduler:
  DOC:
    BRIEF: Scheduler
  VALUES:
    0:
      NAME: PastixSchedSequential
      VALUE: '0'
      BRIEF: Sequential
    1:
      NAME: PastixSchedStatic
      VALUE: '1'
      BRIEF: Shared memory with static scheduler
    2:
      NAME: PastixSchedParsec
      VALUE: '2'
      BRIEF: PaRSEC scheduler
    3:
      NAME: PastixSchedStarPU
      VALUE: '3'
      BRIEF: StarPU scheduler
    4:
      NAME: PastixSchedDynamic
      VALUE: '4'
      BRIEF: Shared memory with dynamic scheduler
ordering:
  DOC:
    BRIEF: Ordering strategy
  VALUES:
    0:
      NAME: PastixOrderScotch
      BRIEF: Use Scotch ordering
    1:
      NAME: PastixOrderMetis
      BRIEF: Use Metis ordering
    2:
      NAME: PastixOrderPersonal
      BRIEF: Apply user's permutation, or load from file
    3:
      NAME: PastixOrderPtScotch
      BRIEF: Use Pt-Scotch ordering
    4:
      NAME: PastixOrderParMetis
      BRIEF: Use ParMetis ordering
mpithreadmode:
  DOC:
    BRIEF: MPI thread mode
  VALUES:
    0:
      NAME: PastixMpiNone
      VALUE: '0'
      BRIEF: No MPI support
    1:
      NAME: PastixMpiThreadSingle
      VALUE: '1'
      BRIEF: MPI thread single support
    2:
      NAME: PastixMpiThreadFunneled
      VALUE: '2'
      BRIEF: MPI thread funneled support
    3:
      NAME: PastixMpiThreadSerialized
      VALUE: '3'
      BRIEF: MPI thread serialized support
    4:
      NAME: PastixMpiThreadMultiple
      VALUE: '4'
      BRIEF: MPI thread multiple support
error:
  DOC:
    BRIEF: Error codes
  VALUES:
    0:
      NAME: PASTIX_SUCCESS
      VALUE: '0'
      BRIEF: No error
    1:
      NAME: PASTIX_ERR_UNKNOWN
      VALUE: '1'
      BRIEF: Unknown error
    2:
      NAME: PASTIX_ERR_ALLOC
      VALUE: '2'
      BRIEF: Allocation error
    3:
      NAME: PASTIX_ERR_NOTIMPLEMENTED
      VALUE: '3'
      BRIEF: Not implemented feature
    4:
      NAME: PASTIX_ERR_OUTOFMEMORY
      VALUE: '4'
      BRIEF: Not enough memory
    5:
      NAME: PASTIX_ERR_THREAD
      VALUE: '5'
      BRIEF: Error with threads
    6:
      NAME: PASTIX_ERR_INTERNAL
      VALUE: '6'
      BRIEF: Internal error
    7:
      NAME: PASTIX_ERR_BADPARAMETER
      VALUE: '7'
      BRIEF: Bad parameters given
    8:
      NAME: PASTIX_ERR_FILE
      VALUE: '8'
      BRIEF: Error in In/Out operations
    9:
      NAME: PASTIX_ERR_INTEGER_TYPE
      VALUE: '9'
      BRIEF: Error with integer types
    10:
      NAME: PASTIX_ERR_IO
      VALUE: '10'
      BRIEF: Error with input/output
    11:
      NAME: PASTIX_ERR_MPI
      VALUE: '11'
      BRIEF: Error with MPI calls
compress_when:
  DOC:
    BRIEF: Compression strategy available for IPARM_COMPRESS_WHEN parameter
  VALUES:
    0:
      NAME: PastixCompressNever
      BRIEF: Do not use compression
    1:
      NAME: PastixCompressWhenBegin
      BRIEF: Compress before any numerical operation (Minimal-Memory)
    2:
      NAME: PastixCompressWhenEnd
      BRIEF: Compress after contributions were accumulated (Just-In-Time)
    3:
      NAME: PastixCompressWhenDuring
      BRIEF: Compress after contributions from other supernodes were accumulated
compress_method:
  DOC:
    BRIEF: Compression method available for IPARM_COMPRESS_METHOD parameter
  VALUES:
    0:
      NAME: PastixCompressMethodSVD
      BRIEF: Use singular value decomposition for low-rank compression
    1:
      NAME: PastixCompressMethodPQRCP
      BRIEF: Use partial QR with column pivoting for low-rank compression
    2:
      NAME: PastixCompressMethodRQRCP
      BRIEF: Use randomized QR with column pivoting for low-rank compression
    3:
      NAME: PastixCompressMethodTQRCP
      BRIEF: Use truncated QR with column pivotingfor low-rank compression
    4:
      NAME: PastixCompressMethodRQRRT
      BRIEF: Use randomized QR with rotation for low-rank compression
    5:
      NAME: PastixCompressMethodNbr
      BRIEF: Total number of available compression methods
compress_ortho:
  DOC:
    BRIEF: Orthogonalization method available for IPARM_COMPRESS_ORTHO parameter
  VALUES:
    0:
      NAME: PastixCompressOrthoCGS
      BRIEF: Orthogonalize low-rank bases with Gram-Schimdt
    1:
      NAME: PastixCompressOrthoQR
      BRIEF: Orthogonalize low-rank bases with QR decomposition
    2:
      NAME: PastixCompressOrthoPartialQR
      BRIEF: Orthogonalize low-rank bases with projections in orthogonal space followed
        by smaller QR
split:
  DOC:
    BRIEF: Splitting strategy available for IPARM_SPLITTING_STRATEGY parameter
  VALUES:
    0:
      NAME: PastixSplitNot
      BRIEF: Do not apply dedicated low-rank clustering strategy
    1:
      NAME: PastixSplitKway
      BRIEF: Use k-way partitioning
    2:
      NAME: PastixSplitKwayProjections
      BRIEF: Use projections and k-way in clusters
layout:
  DOC:
    BRIEF: Direction of the matrix storage
  VALUES:
    0:
      NAME: PastixRowMajor
      VALUE: '101'
      BRIEF: Storage in row major order
    1:
      NAME: PastixColMajor
      VALUE: '102'
      BRIEF: Storage in column major order
trans:
  DOC:
    BRIEF: Transpostion
  VALUES:
    0:
      NAME: PastixNoTrans
      VALUE: '111'
      BRIEF: Use A
    1:
      NAME: PastixTrans
      VALUE: '112'
      BRIEF: Use A^t
    2:
      NAME: PastixConjTrans
      VALUE: '113'
      BRIEF: Use conj(A^t)
mtxtype:
  DOC:
    BRIEF: Matrix symmetry type property.
    DETAILS: '@remark Must match transposition.

      '
  VALUES:
    0:
      NAME: PastixGeneral
      VALUE: PastixNoTrans
      BRIEF: The matrix is general
    1:
      NAME: PastixSymmetric
      VALUE: PastixTrans
      BRIEF: The matrix is symmetric
    2:
      NAME: PastixHermitian
      VALUE: PastixConjTrans
      BRIEF: The matrix is hermitian
uplo:
  DOC:
    BRIEF: Upper/Lower part
  VALUES:
    0:
      NAME: PastixUpper
      VALUE: '121'
      BRIEF: Use lower triangle of A
    1:
      NAME: PastixLower
      VALUE: '122'
      BRIEF: Use upper triangle of A
    2:
      NAME: PastixUpperLower
      VALUE: '123'
      BRIEF: Use the full A
coefside:
  DOC:
    BRIEF: Data blocks used in the kernel
    DETAILS: '@warning Must be 0 and 1 respectively for Left and Upper as is it used
      to

      shift the pointers in the kernels from the lower to upper part.

      '
  VALUES:
    0:
      NAME: PastixLCoef
      VALUE: '0'
      BRIEF: Coefficients of the lower triangular L are used
    1:
      NAME: PastixUCoef
      VALUE: '1'
      BRIEF: Coefficients of the upper triangular U are used
    2:
      NAME: PastixLUCoef
      VALUE: '2'
      BRIEF: Coefficients of the upper/lower triangular U/L are used
diag:
  DOC:
    BRIEF: Diagonal
  VALUES:
    0:
      NAME: PastixNonUnit
      VALUE: '131'
      BRIEF: Diagonal is non unitary
    1:
      NAME: PastixUnit
      VALUE: '132'
      BRIEF: Diagonal is unitary
side:
  DOC:
    BRIEF: Side of the operation
  VALUES:
    0:
      NAME: PastixLeft
      VALUE: '141'
      BRIEF: Apply operator on the left
    1:
      NAME: PastixRight
      VALUE: '142'
      BRIEF: Apply operator on the right
normtype:
  DOC:
    BRIEF: Norms
  VALUES:
    0:
      NAME: PastixOneNorm
      VALUE: '171'
      BRIEF: 'One norm:       max_j( sum_i( |a_{ij}| ) )'
    1:
      NAME: PastixFrobeniusNorm
      VALUE: '174'
      BRIEF: 'Frobenius norm: sqrt( sum_{i,j} (a_{ij}^2) )'
    2:
      NAME: PastixInfNorm
      VALUE: '175'
      BRIEF: 'Inifinite norm: max_i( sum_j( |a_{ij}| ) )'
    3:
      NAME: PastixMaxNorm
      VALUE: '177'
      BRIEF: 'Inifinite norm: max_{i,j}( | a_{ij} | )'
dir:
  DOC:
    BRIEF: Direction
  VALUES:
    0:
      NAME: PastixDirForward
      VALUE: '391'
      BRIEF: Forward direction
    1:
      NAME: PastixDirBackward
      VALUE: '392'
      BRIEF: Backward direction
