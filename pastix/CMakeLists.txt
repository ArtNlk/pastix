cmake_minimum_required (VERSION 2.8)
project (PASTIX C CXX Fortran)

include(CMakeDependentOption)
include(CheckFunctionExists)

# The current version number
set (PASTIX_VERSION_MAJOR 5)
set (PASTIX_VERSION_MINOR 1)
set (PASTIX_VERSION_MICRO 0)

set( PASTIX_VERSION "${PASTIX_VERSION_MAJOR}.${PASTIX_VERSION_MINOR}.${PASTIX_VERSION_MICRO}" )

# Add extra cmake module path and initialize morse cmake modules
# --------------------------------------------------------------
list(APPEND CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/cmake_modules)

set( MORSE_CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/cmake_modules/morse )
list(APPEND CMAKE_MODULE_PATH ${MORSE_CMAKE_MODULE_PATH})
include(MorseInit)

# Define precision supported by MAGMA_MORSE
# -----------------------------------------
set( RP_PASTIX_DICTIONNARY ${MORSE_CMAKE_MODULE_PATH}/precision_generator/subs.py )
set( RP_PASTIX_PRECISIONS  "s;d;c;z" )
include(RulesPrecisions)

### System parameter detection
include(CheckSystem)

### Misc options
option(BUILD_SHARED_LIBS
  "Build shared libraries" OFF)
option(BUILD_64bits
  "Build 64 bits mode" ON)
if(NOT CMAKE_BUILD_TYPE)
  set(CMAKE_BUILD_TYPE RelWithDebInfo CACHE STRING "Choose the type of build, options are None, Debug, Release, RelWithDebInfo and MinSizeRel." FORCE)
endif(NOT CMAKE_BUILD_TYPE)

### Distributed engine parameters
option(PASTIX_WITH_MPI
    "Build PaStiX for distributed memory with MPI" OFF)

### GPU engine parameters
option(PASTIX_WITH_CUDA
    "Enable GPU support using CUDA kernels" OFF)

### Runtime engines
option(PASTIX_WITH_STARPU
    "Build PaStiX with StarPU runtime support" OFF)
option(PASTIX_WITH_STARPU_PROFILING
  "Build PaStiX with StarPU runtime support profiling" OFF)
option(PASTIX_WITH_PARSEC
  "Build PaStiX with PaRSEC runtime support" OFF)

# Internal options
option(PASTIX_DUMP_CBLK
  "Dump all cblk on disk after modifications" OFF)

cmake_dependent_option(PASTIX_DISTRIBUTED
 "Enable the distributed interface (requires PASTIX_WITH_MPI)" OFF "PASTIX_WITH_MPI" OFF)

cmake_dependent_option(PASTIX_THREAD_COMM
 "Enable the specific communication thread (requires PASTIX_WITH_MPI)" ON "PASTIX_WITH_MPI" OFF)

cmake_dependent_option(PASTIX_FUNNELED
 "Enable the funneled (requires PASTIX_THREAD_COMM), toggle using IPARM_THREAD_COMM_MODE" ON "PASTIX_THREAD_COMM" OFF)

option(PASTIX_INT64
  "Choose between int32 and int64 for integer representation" ON)

# Precisions generated
if(NOT PASTIX_PRECISIONS)
  set(PASTIX_PRECISIONS "s;d;c;z" CACHE STRING "The precisions to compile in PaSTiX (accepts a colon separated list of s;d;c;z)" FORCE)
else()
  set(PASTIX_PRECISIONS "${PASTIX_PRECISIONS}" CACHE STRING "The precisions to compile in PaSTiX (accepts a colon separated list of s;d;c;z)" FORCE)
endif()

# Ordering step options
option(PASTIX_ORDERING_SCOTCH
  "Enable Scotch Ordering" ON)
option(PASTIX_ORDERING_METIS
  "Enable Metis ordering"  OFF)
cmake_dependent_option(PASTIX_ORDERING_PTSCOTCH
  "Activate the PT-scotch ordering (requires PASTIX_DISTRIBUTED and PASTIX_ORDERING_SCOTCH)" ON
  "PASTIX_DISTRIBUTED;PASTIX_ORDERING_SCOTCH" OFF)

# Symbolic factorization options
option(PASTIX_SYMBOL_DUMP_SYMBMTX
  "Dump the generated symbol matrix in a postscript file" OFF)
option(PASTIX_SYMBOL_FORCELOAD
  "Force the symbol matrix to be loaded from file" OFF)

# Symbolic factorization options
option(PASTIX_BLEND_GENTRACE
  "Allow trace generation in Blend simulation" OFF)

# Options to check
option(FORGET_PARTITION
  "Force to forget the partition generated by Scotch" OFF)
option(COMPACT_SMX
  "Optimization for solve computations (TODO: check if not obsolete because results don't converge)" OFF)

###############################################################################
# Look for dependencies #
#########################

include(FortranCInterface)
FortranCInterface_HEADER(common/FCmangle.h
  MACRO_NAMESPACE "FC_"
  SYMBOL_NAMESPACE "FC_")

# PaStiX depends on CBLAS
#----------------------------
find_package(BLASEXT REQUIRED)
set(HAVE_BLAS ${BLAS_FOUND})

find_package(CBLAS REQUIRED)
set(HAVE_CBLAS ${CBLAS_FOUND})
if(CBLAS_FOUND)
    message(STATUS "cblas: ${CBLAS_INCLUDE_DIRS}")
    include_directories(${CBLAS_INCLUDE_DIRS})
endif()

# PaStiX depends on HwLoc
#---------------------------
find_package(HWLOC)
set(HAVE_HWLOC ${HWLOC_FOUND})
if( HWLOC_FOUND )
  link_directories( ${HWLOC_LIBRARY_DIRS} )
  link_libraries( ${HWLOC_LIBRARIES} )
  include_directories( ${HWLOC_INCLUDE_DIRS} )
endif (HWLOC_FOUND)

# PaStiX might depend on MPI
#------------------------------
if (PASTIX_WITH_MPI)
  # Force the detection of the C library
  find_package(MPI)
  set(HAVE_MPI ${MPI_C_FOUND})
  if (MPI_C_FOUND)
    list(APPEND EXTRA_LIBS ${MPI_C_LIBRARIES} )
    include_directories( ${MPI_C_INCLUDE_PATH} )

    # Check to see if support for MPI 2.0 is available
    set(saved_include "${CMAKE_REQUIRED_INCLUDES}" )
    set(saved_libs    "${CMAKE_REQUIRED_LIBRARIES}")
    set(CMAKE_REQUIRED_INCLUDES  "${CMAKE_REQUIRED_INCLUDES};${MPI_C_INCLUDE_PATH}")
    set(CMAKE_REQUIRED_LIBRARIES "${CMAKE_REQUIRED_LIBRARIES};${MPI_C_LIBRARIES}")
    check_function_exists(MPI_Type_create_resized HAVE_MPI_20)
    set(CMAKE_REQUIRED_INCLUDES  "${saved_include}")
    set(CMAKE_REQUIRED_LIBRARIES "${saved_libs}")

  else (MPI_C_FOUND)
    message(ERROR "MPI is required but was not found. Please provide an MPI compiler in your environment or configure with -DPASTIX_WITH_MPI=OFF")
  endif (MPI_C_FOUND)
endif (PASTIX_WITH_MPI)

# PaStiX might depend on CUDA
#-------------------------------
if( PASTIX_WITH_CUDA )

    find_package(CUDA)

    set(HAVE_CUDA ${CUDA_FOUND})
    if (CUDA_FOUND)
        if(CUDA_VERSION VERSION_LESS "3.0")
            set(CUDA_HOST_COMPILATION_CPP OFF)
        endif(CUDA_VERSION VERSION_LESS "3.0")
        set(CUDA_BUILD_EMULATION OFF)
        include_directories(${CUDA_INCLUDE_DIRS})
        link_libraries(${CUDA_LIBRARIES}) # need CUDA libs to link.
        set(saved_include "${CMAKE_REQUIRED_INCLUDES}")
        set(saved_libs "${CMAKE_REQUIRED_LIBRARIES}")
        set(CMAKE_REQUIRED_INCLUDES  "${CMAKE_REQUIRED_INCLUDES};${CUDA_INCLUDE_DIRS}")
        set(CMAKE_REQUIRED_LIBRARIES "${CMAKE_REQUIRED_LIBRARIES};${CUDA_LIBRARIES}")
        if(CUDA_VERSION VERSION_LESS "4.0")
            set(CUDA_HAVE_PEER_DEVICE_MEMORY_ACCESS 0)
        else()
            check_function_exists(cuDeviceCanAccessPeer CUDA_HAVE_PEER_DEVICE_MEMORY_ACCESS)
        endif()
        set(CMAKE_REQUIRED_INCLUDES  "${saved_include}")
        set(CMAKE_REQUIRED_LIBRARIES "${saved_libs}")

        set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -DCUDA_SM_VERSION=20")

    else(CUDA_FOUND)
        message(ERROR "CUDA is required but was not found. Please provide a CUDA library in your environment or configure with -DPASTIX_WITH_CUDA=OFF")
    endif (CUDA_FOUND)

endif()

# PaStiX might depend on StarPU
#---------------------------------
if (PASTIX_WITH_STARPU)

    set(PASTIX_STARPU_VERSION "1.1" CACHE STRING "oldest STARPU version desired")

    # Create list of components in order to make a single call to find_package(starpu...)
    set(STARPU_COMPONENT_LIST "HWLOC")
    if(PASTIX_WITH_MPI)
        list(APPEND STARPU_COMPONENT_LIST "MPI")
    endif()
    if(PASTIX_WITH_CUDA)
        list(APPEND STARPU_COMPONENT_LIST "CUDA")
    endif()
    if(PASTIX_WITH_FXT)
        list(APPEND STARPU_COMPONENT_LIST "FXT")
    endif()

    find_package(STARPU ${PASTIX_STARPU_VERSION} REQUIRED
                 COMPONENTS ${STARPU_COMPONENT_LIST})

    set(HAVE_STARPU ${STARPU_FOUND})

    # Add definition and include_dir if found
    if(STARPU_FOUND)
        include_directories(${STARPU_INCLUDE_DIRS})
        set(CMAKE_REQUIRED_INCLUDES "${STARPU_INCLUDE_DIRS}")
        foreach(libdir ${STARPU_LIBRARY_DIRS})
            list(APPEND CMAKE_REQUIRED_FLAGS "-L${libdir}")
        endforeach()
        string(REPLACE ";" " " CMAKE_REQUIRED_FLAGS "${CMAKE_REQUIRED_FLAGS}")
        if(PASTIX_USE_FXT)
            # check if fxt profiling is accessible in starpu and activate it in magmamorse
            set(CMAKE_REQUIRED_LIBRARIES "${STARPU_SHM_LIBRARIES}")
            unset(STARPU_FXT_START_PROFILING_FOUND CACHE)
            check_function_exists(starpu_fxt_start_profiling STARPU_FXT_START_PROFILING_FOUND)
            if ( STARPU_FXT_START_PROFILING_FOUND )
                message(STATUS "Set HAVE_STARPU_FXT_PROFILING - Activate FxT profiling through StarPU")
                add_definitions(-DHAVE_STARPU_FXT_PROFILING)
            endif()
        endif()
        if (STARPU_MPI_LIBRARIES)
            # Check if a specific function exist
            set(CMAKE_REQUIRED_LIBRARIES "${STARPU_MPI_LIBRARIES}")
            unset(STARPU_MPI_DATA_REGISTER_FOUND CACHE)
            check_function_exists(starpu_mpi_data_register STARPU_MPI_DATA_REGISTER_FOUND)
            if ( STARPU_MPI_DATA_REGISTER_FOUND )
                add_definitions(-DHAVE_STARPU_MPI_DATA_REGISTER)
            endif()
        endif()

    else(STARPU_FOUND)
        message(ERROR "StarPU with ${STARPU_COMPONENT_LIST} components is required but was not found. Please provide the StarPU library in your environment or configure with -DPASTIX_WITH_STARPU=OFF")
    endif()

endif (PASTIX_WITH_STARPU)

# PaStiX might depend on Scotch/PT-Scotch
#----------------------------------------
if (PASTIX_ORDERING_PTSCOTCH)
  find_package(PTSCOTCH)
  if (PTSCOTCH_FOUND)
    include_directories( ${PTSCOTCH_INCLUDE_DIRS} )
    link_directories( ${PTSCOTCH_LIBRARY_DIRS} )
    list(INSERT EXTRA_LIBS 1 ${PTSCOTCH_LIBRARIES} )
  else (PTSCOTCH_FOUND)
    message(ERROR "PTSCOTCH is required if PASTIX_ORDERING_PTSCOCTH is on but was not found. Please provide an PtScotch library in your environment or configure with -DPASTIX_ORDERING_PTSCOTCH=OFF")
  endif (PTSCOTCH_FOUND)

  # Check coherency for integer size
  if(PASTIX_INT64 AND NOT PTSCOTCH_Num_8)
    message(ERROR "PASTIX_INT64 is enabled and provided PT-Scotch is not compiled with int64 support.")
  endif()
  if(NOT PASTIX_INT64 AND NOT PTSCOTCH_Num_4)
    message(ERROR "PASTIX_INT64 is disabled and provided PT-Scotch is not compiled with int32 support.")
  endif()
endif()

if (PASTIX_ORDERING_SCOTCH)
  find_package(SCOTCH)
  if (SCOTCH_FOUND)
    message(STATUS "Scotch inlude dirs: ${SCOTCH_INCLUDE_DIRS} ${SCOTCH_LIBRARY_DIRS} ${SCOTCH_LIBRARIES}" )
    include_directories( ${SCOTCH_INCLUDE_DIRS} )
    link_directories( ${SCOTCH_LIBRARY_DIRS} )
    link_libraries( ${SCOTCH_LIBRARIES} )
  else()
    message(ERROR "Scotch is required but was not found. Please provide a Scotch library in your environment or configure with -DPASTIX_ORDERING_SCOTCH=OFF")
  endif()

  # Check coherency for integer size
  if(PASTIX_INT64 AND NOT SCOTCH_Num_8)
    message(ERROR "PASTIX_INT64 is enabled and provided Scotch is not compiled with int64 support.")
  endif()
  if(NOT PASTIX_INT64 AND NOT SCOTCH_Num_4)
    message(ERROR "PASTIX_INT64 is disabled and provided Scotch is not compiled with int32 support.")
  endif()
endif()


# PaStiX might depend on Metis/ParMetis
#--------------------------------------
if (PASTIX_ORDERING_METIS)
  find_package(METIS)
  if (METIS_FOUND)
    include_directories( ${METIS_INCLUDE_DIRS} )
    link_directories( ${METIS_LIBRARY_DIRS} )
    link_libraries( ${METIS_LIBRARIES} )
  else()
    message(ERROR "Metis is required but was not found. Please provide a Metis library in your environment or configure with -DPASTIX_ORDERING_METIS=OFF")
  endif()
endif()

# PaStiX might depend on GTG
#---------------------------
if (PASTIX_BLEND_GENTRACE)
  include_directories("${GTG_DIR}/include")
  set(GTG_LIBRARY_DIRS "${GTG_DIR}/lib")
  set(GTG_LIBRARIES    "gtg")
endif()

#
##
###
# Finished detecting the system, lets do our own things now
###
##
#

# Disable restrict (temporary)
set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Drestrict=")

set(PROJECT_INCLUDE_DIR "${CMAKE_CURRENT_BINARY_DIR}/include")
include_directories(BEFORE "${PROJECT_INCLUDE_DIR}")

STRING(COMPARE EQUAL ${CMAKE_CURRENT_BINARY_DIR} ${CMAKE_CURRENT_SOURCE_DIR} PROJECT_COMPILE_INPLACE)
if(NOT PROJECT_COMPILE_INPLACE)
  include_directories(BEFORE "${CMAKE_CURRENT_SOURCE_DIR}/include")
endif(NOT PROJECT_COMPILE_INPLACE)

#Configuration header
configure_file (
  "${CMAKE_CURRENT_SOURCE_DIR}/include/pastix/config.h.in"
  "${PROJECT_INCLUDE_DIR}/pastix/config.h")
install(FILES "${PROJECT_INCLUDE_DIR}/pastix/config.h" DESTINATION include/pastix)

# # pkg-config file
# configure_file (
#   "${CMAKE_CURRENT_SOURCE_DIR}/include/pastix.pc.in"
#   "${CMAKE_BINARY_DIR}/lib/pkgconfig/pastix.pc")
# install(FILES "${CMAKE_BINARY_DIR}/lib/pkgconfig/pastix.pc" DESTINATION lib/pkgconfig)

add_definitions(-DDOF_CONSTANT)
add_definitions(-DX_ARCHi686_pc_linux)

execute_process(COMMAND "./myversion.sh" OUTPUT_VARIABLE PASTIX_VERSION)
set(TOTO "-DVERSION=\"toto\"" )
add_definitions(${TOTO})

# Build matrix drivers library
#
#add_subdirectory(tools)
#add_subdirectory(matrix_drivers)

include_directories("${CMAKE_CURRENT_SOURCE_DIR}/include")
include_directories("${CMAKE_CURRENT_BINARY_DIR}/include")
include_directories("${CMAKE_CURRENT_SOURCE_DIR}/common")
include_directories("${CMAKE_CURRENT_BINARY_DIR}/common")
include_directories("${CMAKE_CURRENT_SOURCE_DIR}/kernels")
include_directories("${CMAKE_CURRENT_BINARY_DIR}/kernels")

include_directories("${CMAKE_CURRENT_SOURCE_DIR}/blend")
include_directories("${CMAKE_CURRENT_SOURCE_DIR}/fax")
include_directories("${CMAKE_CURRENT_SOURCE_DIR}/graph")
include_directories("${CMAKE_CURRENT_SOURCE_DIR}/csc")
include_directories("${CMAKE_CURRENT_SOURCE_DIR}/bcsc")
include_directories("${CMAKE_CURRENT_SOURCE_DIR}/order")
include_directories("${CMAKE_CURRENT_SOURCE_DIR}/symbol")
include_directories("${CMAKE_CURRENT_SOURCE_DIR}/sopalin")
include_directories("${CMAKE_CURRENT_SOURCE_DIR}/matrix_drivers")

# Sub modules
set(modules bcsc kernels) #csc kernels sopalin matrix_drivers common)
# if (PASTIX_WITH_STARPU)
#   list(APPEND modules starpu)
# endif (PASTIX_WITH_STARPU)
# # For each modules add -I compilation flag and then include module
# foreach (module ${modules})
#   include_directories("${CMAKE_CURRENT_SOURCE_DIR}/${module}")
#   include_directories("${CMAKE_CURRENT_BINARY_DIR}/${module}")
# endforeach()
# # include modules
foreach (module ${modules})
   add_subdirectory(${module})
endforeach()

# # declare dependencies on headers generation
# set(modules_with_libs ${modules})
# list(REMOVE_ITEM modules_with_libs include matrix_drivers)
# message(STATUS ${modules_with_libs})
# foreach (module ${modules_with_libs})
#   foreach (module2 ${modules})
#     add_dependencies(pastix_${module} ${module2}_headers)
#   endforeach()
# endforeach()
# foreach (module2 ${modules})
#   add_dependencies(read_matrix ${module2}_headers)
# endforeach()

# macro(solver_rules _output_files _sources_files)
#   foreach(_source_file ${_sources_files})

#     set(_source_file "${CMAKE_CURRENT_SOURCE_DIR}/${_source_file}")
#     string(REGEX REPLACE "^(.*).c$" "\\1" _prefix "${_source_file}")

#     add_custom_command(OUTPUT ${_prefix}_he.c COMMAND cp ${_source_file} ${_prefix}_he.c DEPENDS ${_source_file} )
#     add_custom_command(OUTPUT ${_prefix}_sy.c COMMAND cp ${_source_file} ${_prefix}_sy.c DEPENDS ${_source_file} )
#     add_custom_command(OUTPUT ${_prefix}_po.c COMMAND cp ${_source_file} ${_prefix}_po.c DEPENDS ${_source_file} )
#     add_custom_command(OUTPUT ${_prefix}_ge.c COMMAND cp ${_source_file} ${_prefix}_ge.c DEPENDS ${_source_file} )

#     set_source_files_properties(${_prefix}_he.c PROPERTIES COMPILE_FLAGS "-UCHOL_SOPALIN -DHERMITIAN" )
#     set_source_files_properties(${_prefix}_sy.c PROPERTIES COMPILE_FLAGS "-UCHOL_SOPALIN" )
#     set_source_files_properties(${_prefix}_po.c PROPERTIES COMPILE_FLAGS "-DCHOL_SOPALIN" )
#     set_source_files_properties(${_prefix}_ge.c PROPERTIES COMPILE_FLAGS "-DCHOL_SOPALIN -DSOPALIN_LU" )

#     list(APPEND ${_output_files}
#       ${_prefix}_he.c
#       ${_prefix}_sy.c
#       ${_prefix}_po.c
#       ${_prefix}_ge.c
#       )

#   endforeach()
# endmacro()


include(RulesPrecisions)

# reset variables
set(generated_files "")
set(SOURCES
  common/z_integer.c
  csc/z_spm_convert_to_csc.c
  csc/z_spm_convert_to_csr.c
  csc/z_spm_convert_to_ijv.c
  csc/z_spm_matrixvector.c
  csc/z_spm_genrhs.c
  matrix_drivers/z_spm_laplacian.c
  sopalin/sequential_zpotrf.c
  sopalin/coeftab_z.c
  )
precisions_rules_py(generated_files
  "${SOURCES}"
  PRECISIONS "p;s;d;c;z"
  )

#
# Build the pastix library
# Create the define for Pastix sources that will be updated in each
# subdirectory
#
set(PASTIX_LIB_SRCS
  # Files that are fully converted
  #
  graph/graph.c
  graph/graph_isolate.c
  graph/graph_prepare.c
  graph/graph_symmetrize.c
  graph/graph_io.c  # Not finished
  csc/csc_io.c  # Not finished
  #
  order/order.c
  order/order_add_isolate.c
  order/order_check.c
  order/order_find_supernodes.c
  order/order_io.c
  order/pastix_task_order.c
  #
  fax/amalgamate.c
  fax/symbol_fax_graph.c
  fax/symbol_kass.c
  fax/symbol_kass_build.c
  fax/symbol_kass_csr.c
  fax/symbol_kass_direct.c
  fax/symbol_kass_level.c
  fax/pastix_task_symbfact.c
  fax/pastix_task_reordering.c
  #
  matrix_drivers/skitf.f
  matrix_drivers/iohb.c
  matrix_drivers/mmio.c
  matrix_drivers/laplacian.c
  matrix_drivers/readhb.c
  matrix_drivers/readijv.c
  matrix_drivers/readmm.c
  matrix_drivers/readrsa.c

  # Files that still require some changes
  blend/cand.c
  blend/elimin_graph.c
  blend/elimin_tree.c
  blend/propmap.c
  blend/extracblk.c
  blend/splitsymbol.c
  blend/blendctrl.c

  blend/blend.c
  blend/bulles.c
  blend/cost.c
#  blend/costfunc.c
  blend/simu_run.c
# blend/distribPart.c
  blend/extendVector.c
  blend/fanboth2.c
  blend/queue.c
  blend/simu.c
# blend/partbuild.c
# blend/smart_cblk_split.c
  blend/solverMatrixGen.c
  blend/solverRealloc.c
  blend/solver_check.c
  blend/solver_io.c
# blend/splitpartlocal.c
  blend/task.c
#  blend/blend_distributeOnGPU.c
  blend/solver.c
  blend/solver_backup.c
  blend/pastix_task_analyze.c

  common/api.c
  common/errors.c
  common/integer.c
  common/isched.c
  common/memory.c
#  common/trace.c
#
#
  symbol/dof.c
  symbol/dof_io.c
  symbol/symbol.c
  symbol/symbol_base.c
  symbol/symbol_check.c
  symbol/symbol_draw.c
  symbol/symbol_io.c
  symbol/symbol_rustine.c
  symbol/symbol_reordering.c
  symbol/symbol_cost.c
  symbol/symbol_cost_flops.c
  symbol/symbol_cost_perfs.c
#  symbol/symbol_tree.c
#
  matrix_drivers/get_options.c
  matrix_drivers/drivers.c
  #matrix_drivers/readmmd.c
  #matrix_drivers/readpetsc.c
  #matrix_drivers/readcscd.c
#
  sopalin/pastix_task_sopalin.c
  sopalin/coeftab.c
#
  csc/csc.c
  csc/genrhs.c
#
  ${generated_files}
  )

set(PASTIX_ALL_SRCS
  ${generated_files}
  #
  graph/graph.c
  graph/graph_isolate.c
  graph/graph_prepare.c
  graph/graph_symmetrize.c
  #
  order/order.c
  order/order_add_isolate.c
  order/order_check.c
  order/order_find_supernodes.c
  order/order_io.c
  order/pastix_task_order.c
  #
  fax/amalgamate.c
  fax/symbol_fax_graph.c
  fax/symbol_kass.c
  fax/symbol_kass_build.c
  fax/symbol_kass_csr.c
  fax/symbol_kass_direct.c
  fax/symbol_kass_level.c
  fax/pastix_task_symbfact.c
  #
#  ${PASTIX_LIB_SRCS}
  order/order_compute_scotch.c
  #order/order_compute_ptscotch.c
  order/order_compute_metis.c

  matrix_drivers/laplacian.c
  matrix_drivers/readhb.c
  matrix_drivers/readijv.c
  matrix_drivers/readmm.c
  matrix_drivers/readrsa.c
)

if(PASTIX_WITH_STARPU)
 list(APPEND PASTIX_LIB_SRCS ${PASTIX_STARPU_SRCS})
endif(PASTIX_WITH_STARPU)

if(PASTIX_ORDERING_SCOTCH) # AND HAVE_SCOTCH)
  set(PASTIX_LIB_SRCS
    ${PASTIX_LIB_SRCS}
    order/order_compute_scotch.c
    order/order_compute_clif.c
    )
endif()
if(PASTIX_ORDERING_PTSCOTCH) # AND HAVE_PTSCOTCH)
  set(PASTIX_LIB_SRCS
    ${PASTIX_LIB_SRCS}
    order/order_compute_ptscotch.c
    )
endif()
if(PASTIX_ORDERING_METIS) # AND HAVE_METIS)
  list(APPEND PASTIX_LIB_SRCS
    order/order_compute_metis.c
    )
endif()
if(HWLOC_FOUND)
  list(APPEND PASTIX_LIB_SRCS
    common/isched_hwloc.c
    )
else()
  list(APPEND PASTIX_LIB_SRCS
    common/isched_nohwloc.c
    )
endif()

add_library(pastix
  ${PASTIX_LIB_SRCS}
  )

add_dependencies(pastix
  kernels_headers
  pastix_bcsc
  pastix_kernels
)

# foreach (module2 ${modules})
#   add_dependencies(pastix ${module2}_headers)
# endforeach()

install(TARGETS pastix
  RUNTIME DESTINATION bin
  ARCHIVE DESTINATION lib
  LIBRARY DESTINATION lib)

# Install header files
set(PASTIX_HDRS
  include/pastix/api.h
  include/pastix/old_api.h
  include/pastix/datatypes.h
  include/pastix/nompi.h
)
install(FILES include/pastix.h DESTINATION include )
install(FILES ${PASTIX_HDRS} DESTINATION include/pastix )


add_subdirectory(example)

FIND_PACKAGE(Doxygen)
if (DOXYGEN_FOUND)
  option(BUILD_DOCUMENTATION "Use Doxygen to create the HTML based API documentation" ON)
else (DOXYGEN_FOUND)
  option(BUILD_DOCUMENTATION "Use Doxygen to create the HTML based API documentation" OFF)
endif(DOXYGEN_FOUND)

if(BUILD_DOCUMENTATION)
  if (NOT DOXYGEN_FOUND)
    message(FATAL_ERROR
      "Doxygen is needed to build the documentation. Please install it correctly")
  endif()

  set(PASTIX_DOX_SRCS )
  foreach( _file ${PASTIX_ALL_SRCS} )
    set(PASTIX_DOX_SRCS "${PASTIX_DOX_SRCS} ${PROJECT_SOURCE_DIR}/${_file}" )
  endforeach()

  #-- Configure the Template Doxyfile for our specific project
  configure_file(${CMAKE_CURRENT_SOURCE_DIR}/docs/doxygen/Doxyfile.in
                 ${CMAKE_CURRENT_BINARY_DIR}/docs/doxygen/Doxyfile @ONLY IMMEDIATE )
  #-- Add a custom target to run Doxygen when ever the project is built
  add_custom_target (docs
    COMMAND ${DOXYGEN_EXECUTABLE} ${CMAKE_CURRENT_BINARY_DIR}/docs/doxygen/Doxyfile
    SOURCES ${CMAKE_CURRENT_BINARY_DIR}/docs/doxygen/Doxyfile )

endif()


#-- Add a custom target to run Doxygen when ever the project is built
add_custom_target (tags
  COMMAND etags ${PASTIX_LIB_SRCS}
  DEPENDS ${PASTIX_LIB_SRCS} )
