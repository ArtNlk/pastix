/*+********************************************************+*/
/*+                                                        +*/
/*+   NAME       : cost.h                                  +*/
/*+                                                        +*/
/*+   AUTHORS    : Pascal HENON                            +*/
/*+                                                        +*/
/*+   FUNCTION   : Part of a parallel direct block solver. +*/
/*+                Definitions of the structures that      +*/
/*+                contains cost informations              +*/
/*+                                                        +*/
/*+   DATES      : # Version 0.0  : from : 27 sep 1998     +*/
/*+                                 to     03 sep 1998     +*/
/*+                                                        +*/
/*+********************************************************+*/

/*
**  The type and structure definitions.
*/

#ifndef COST_H
#define COST_H

typedef struct CostMatrix_ {
    double *blokcost; /*> Cost of the update generated by this block
                          for off-diagonal block, fact+solve otherwise */
    double *cblkcost; /*> Cost of all the operations linked to a panel */
} CostMatrix;

/*
**  The function prototypes.
*/

#ifndef COST
#define static
#endif

pastix_int_t  costMatrixInit   (CostMatrix *);
void          costMatrixExit   (CostMatrix *);
pastix_int_t  costLoad         (CostMatrix *, FILE *);
pastix_int_t  costSave         (CostMatrix *, FILE *);
CostMatrix   *costMatrixBuild  (const SymbolMatrix *, pastix_coeftype_t, pastix_factotype_t);
double        cblkComputeCost  (pastix_int_t, CostMatrix *, const SymbolMatrix *, const Dof *);
void          cblkComputeCostLL(pastix_int_t, CostMatrix *, const SymbolMatrix *, const Dof *);

#undef static

#endif /* COST_H */
