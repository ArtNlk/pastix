"""

 @file enum.py

 PaStiX python definition of enums and datatypes

 @copyright 2017-2017 Bordeaux INP, CNRS (LaBRI UMR 5800), Inria,
                      Univ. Bordeaux. All rights reserved.

 @version 6.0.0
 @author Pierre Ramet
 @author Mathieu Faverge
 @author Louis Poirel
 @date 2017-05-04

"""
import numpy as np
import ctypes

pastix_int = ctypes.@PASTIX_PYTHON_INTEGER@

class iparm:
    verbose               = 0
    io_strategy           = 1
    nnzeros               = 2
    nnzeros_block_local   = 3
    allocated_terms       = 4
    produce_stats         = 5
    mc64                  = 6
    ordering              = 7
    ordering_default      = 8
    scotch_switch_level   = 9
    scotch_cmin           = 10
    scotch_cmax           = 11
    scotch_frat           = 12
    metis_ctype           = 13
    metis_rtype           = 14
    metis_no2hop          = 15
    metis_nseps           = 16
    metis_niter           = 17
    metis_ufactor         = 18
    metis_compress        = 19
    metis_ccorder         = 20
    metis_pfactor         = 21
    metis_seed            = 22
    metis_dbglvl          = 23
    sf_kass               = 24
    amalgamation_lvlblas  = 25
    amalgamation_lvlcblk  = 26
    reordering_split      = 27
    reordering_stop       = 28
    min_blocksize         = 29
    max_blocksize         = 30
    tasks2d_level         = 31
    tasks2d_width         = 32
    abs                   = 33
    allcand               = 34
    incomplete            = 35
    level_of_fill         = 36
    factorization         = 37
    static_pivoting       = 38
    inertia               = 39
    free_cscuser          = 40
    schur_fact_mode       = 41
    schur_solv_mode       = 42
    refinement            = 43
    nbiter                = 44
    itermax               = 45
    gmres_im              = 46
    scheduler             = 47
    thread_nbr            = 48
    autosplit_comm        = 49
    gpu_nbr               = 50
    gpu_memory_percentage = 51
    gpu_memory_block_size = 52
    compress_min_width    = 53
    compress_min_height   = 54
    compress_when         = 55
    compress_method       = 56
    thread_comm_mode      = 57
    modify_parameter      = 58
    start_task            = 59
    end_task              = 60
    float                 = 61
    mtx_type              = 62
    dof_nbr               = 63
    size                  = 64

class dparm:
    fill_in            = 0
    epsilon_refinement = 1
    relative_error     = 2
    epsilon_magn_ctrl  = 3
    analyze_time       = 4
    pred_fact_time     = 5
    fact_time          = 6
    solv_time          = 7
    fact_flops         = 8
    fact_thflops       = 9
    fact_rlflops       = 10
    solv_flops         = 11
    solv_thflops       = 12
    solv_rlflops       = 13
    refine_time        = 14
    a_norm             = 15
    compress_tolerance = 16
    compress_min_ratio = 17
    size               = 18

class task:
    Init     = 0
    Ordering = 1
    Symbfact = 2
    Analyze  = 3
    Numfact  = 4
    Solve    = 5
    Refine   = 6
    Clean    = 7

class verbose:
    Not = 0
    No  = 1
    Yes = 2

class io:
    No        = 0
    Load      = 1
    Save      = 2
    LoadGraph = 4
    SaveGraph = 8
    LoadCSC   = 16
    SaveCSC   = 32

class fact_mode:
    Local = 0
    Schur = 1
    Both  = 2

class solv_mode:
    Local     = 0
    Interface = 1
    Schur     = 2

class refine:
    GMRES    = 0
    CG       = 1
    SR       = 2
    BiCGSTAB = 3

class coeftype:
    Pattern   = 0 # Pattern only, no values are stored
    Float     = 2 # Single precision real
    Double    = 3 # Double precision real
    Complex32 = 4 # Single precision complex
    Complex64 = 5 # Double precision complex

    @staticmethod
    def getptype ( dtype ):
        np_dict = {
            np.dtype('float32')    : coeftype.Float,
            np.dtype('float64')    : coeftype.Double,
            np.dtype('complex64')  : coeftype.Complex32,
            np.dtype('complex128') : coeftype.Complex64,
        }
        if dtype in np_dict:
            return np_dict[dtype]
        else:
            return -1

    @staticmethod
    def getnptype ( flttype ):
        np_dict = {
            coeftype.Float     : np.dtype('float32'),
            coeftype.Double    : np.dtype('float64'),
            coeftype.Complex32 : np.dtype('complex64'),
            coeftype.Complex64 : np.dtype('complex128')
        }
        if flttype in np_dict:
            return np_dict[flttype]
        else:
            return -1

class fmttype:
    CSC = 0
    CSR = 1
    IJV = 2

class factotype:
    POTRF = 0
    SYTRF = 1
    GETRF = 2
    PXTRF = 3
    HETRF = 4
    LLH   = 0
    LDLT  = 1
    LU    = 2
    LLT   = 3
    LDLH  = 4

class scheduler:
    Sequential = 0
    Static     = 1
    Parsec     = 2
    StarPU     = 3
    Dynamic    = 4

class order:
    Scotch   = 0
    Metis    = 1
    Personal = 2
    Load     = 3
    PtScotch = 4
    ParMetis = 5

class threadmode:
    Multiple = 1
    Funneled = 2

class error:
    SUCCESS        = 0
    UNKNOWN        = 1
    ALLOC          = 2
    NOTIMPLEMENTED = 3
    OUTOFMEMORY    = 4
    THREAD         = 5
    INTERNAL       = 6
    BADPARAMETER   = 7
    FILE           = 8
    INTEGER_TYPE   = 9
    IO             = 10
    MPI            = 11

class compress_when:
    Never  = 0
    Begin  = 1
    End    = 2
    During = 3

class compress_method:
    SVD  = 0
    RRQR = 1

class driver:
    RSA        = 0
    HB         = 1
    IJV        = 2
    MM         = 3
    Laplacian  = 4
    XLaplacian = 5
    Graph      = 6

class rhstype:
    One  = 0
    I    = 1
    RndX = 2
    RndB = 3

class layout:
    RowMajor = 101
    ColMajor = 102

class trans:
    NoTrans   = 111
    Trans     = 112
    ConjTrans = 113

class mtxtype:
    General   = trans.NoTrans
    Symmetric = trans.Trans
    Hermitian = trans.ConjTrans

class uplo:
    Upper      = 121
    Lower      = 122
    UpperLower = 123

class coefside:
    LCoef  = 0
    UCoef  = 1
    LUCoef = 2

class diag:
    NonUnit = 131
    Unit    = 132

class side:
    Left  = 141
    Right = 142

class normtype:
    One       = 171
    Frobenius = 174
    Inf       = 175
    Max       = 177

class dir:
    Forward  = 391
    Backward = 392

