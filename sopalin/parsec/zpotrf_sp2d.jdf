extern "C" %{
  /**
   * PLASMA include for defined and constants.
   *
   * @precisions normal z -> s d c
   *
   */
#include <parsec.h>
#include <parsec/data_distribution.h>
#include <parsec/private_mempool.h>
#include "common.h"
#include "solver.h"
#include "pastix_zcores.h"
#include "sopalin_data.h"

%}

/* Globals
 */
dataA        [type = "parsec_ddesc_t *" ]
sopalin_data [type = "sopalin_data_t *" ]

descA     [type = "sparse_matrix_desc_t*" hidden = on default = "((sparse_matrix_desc_t*)dataA)"]
datacode  [type = "SolverMatrix*"         hidden = on default = "(sopalin_data->solvmtx)"       ]
cblknbr   [type = "pastix_int_t"          hidden = on default = "(datacode->cblknbr - 1)"       ]
bloknbr   [type = "pastix_int_t"          hidden = on default = "(datacode->bloknbr - 2)"       ]
cblkmin2d [type = "pastix_int_t"          hidden = on default = "(datacode->cblkmin2d)"         ]
lowrank   [type = "pastix_lr_t"           hidden = on default = "(sopalin_data->solvmtx->lowrank)"]

p_work    [type = "parsec_memory_pool_t *"]

/**************************************************
 *                   POTRF                        *
 * panel factorization: do trf of diagonal and    *
 *                    : trsm on off-diagonal      *
 **************************************************/
POTRF(k) [high_priority = on]

// Execution space
k = 0 .. cblknbr

browk0    = %{ SolverCblk *cblk = datacode->cblktab + k;     return cblk->brownum; %}
browk1    = %{ SolverCblk *cblk = datacode->cblktab + k + 1; return cblk->brownum; %}
lastbrow  = %{ if ( browk0 == browk1 ) return 0; else return datacode->browtab[ browk1 - 1 ]; %}
isTwoD    = %{ SolverCblk *cblk = datacode->cblktab + k;     return cblk->cblktype & CBLK_TASKS_2D; %}
firstblok = %{ SolverCblk *cblk = datacode->cblktab + k;     return cblk->fblokptr - datacode->bloktab + 1; %}
lastblok  = %{ SolverCblk *cblk = datacode->cblktab + k + 1; return cblk->fblokptr - datacode->bloktab - 1; %}

// Parallel partitioning
:dataA(0, k, 0)

// Parameters
/* C is A(k) if it's a leaf or get the cblk from the last update */
RW L <- ( browk0 == browk1 ) ? dataA(0, k, 0) : C GEMM1D( lastbrow )
     -> !isTwoD ? A GEMM1D(firstblok .. lastblok)
     -> dataA(0, k, 0)

CTL ctl -> isTwoD ? ctl OneToTwoD(k, 0 .. (lastblok-firstblok+1))

; %{ return cblknbr - k; %}

BODY
{
    if (!isTwoD) {
        SolverCblk *cblk = datacode->cblktab + k;
        core_zpotrfsp1d_panel( cblk, L, sopalin_data->diagthreshold, &lowrank );
    }
    else {
        /* Compression between 1D and 2D updates */
        if ( lowrank.compress_when == PastixCompressWhenDuring ) {
            SolverCblk *cblk = datacode->cblktab + k;
            coeftab_zcompress_one( cblk, lowrank );
        }
    }
}
END

/**
 *       GEMM
 *
 * To have a contiguous range of GEMM to release in the potrf, they are numbered
 * with the indexes of the off-diagonal blocks, diagonal block included.
 * Thus, the diagonal block tasks which doesn't perfom computations are used as
 * DATA_IN tasks. This is mandatory when using the GPU, due to the versioning
 * bumped by the cpu version of the diagonal block that coccurs when computing
 * the diagonal blocks.
 *
 * For all off-diagonal blocks, it updates the trailing matrix with the panel
 * k-th block updating corresponding.
 *
 */
GEMM1D(bloknum)

// Execution space
bloknum = 1 .. bloknbr

lcblknm = %{ SolverBlok *blok = datacode->bloktab + bloknum;     return blok->lcblknm; %}
fcblknm = %{ SolverBlok *blok = datacode->bloktab + bloknum;     return blok->fcblknm; %}
first   = %{ SolverCblk *cblk = datacode->cblktab + fcblknm;     return cblk->brownum; %}
last    = %{ SolverCblk *cblk = datacode->cblktab + fcblknm + 1; return cblk->brownum - 1; %}
isTwoD  = %{ SolverCblk *cblk = datacode->cblktab + lcblknm;     return cblk->cblktype & CBLK_TASKS_2D; %}

brownum = %{ return datacode->bloktab[bloknum].browind; %} /* -1 if diagonal block */
prev    = %{
    assert( first >= 0 );
    /**
     * If bloknum is a diagonal block, or if it is the first one applied on C,
     * there is no previous
     */
    if ((brownum == -1) || (brownum == first) ) {
        return 0;
    }
    /**
     * Otherwise we return the previous block in the list of blocks facing fcblk
     */
    else {
        assert( brownum > first );
        return datacode->browtab[brownum-1];
    }
    %}
next    = %{
    /**
     * If we are on a diagonal blok, or if we are the last one, there is no next
     */
    if ((brownum == -1) || (brownum >= last) ){
        return 0;
    } else {
        return datacode->browtab[brownum+1];
    }
    %}

n  = %{ if (brownum == -1) return 0; else return blok_rownbr(datacode->bloktab + bloknum); %}
k  = %{ if (brownum == -1) return 0; else return cblk_colnbr(datacode->cblktab + lcblknm); %}
m  = %{ if (brownum == -1) return 0; else {
        if ((datacode->cblktab + lcblknm)->cblktype & CBLK_LAYOUT_2D) {
            return datacode->cblktab[lcblknm].stride - (datacode->bloktab[bloknum].coefind / k);
        } else {
            return datacode->cblktab[lcblknm].stride - datacode->bloktab[bloknum].coefind;
        }
    }%}

// Parallel partitioning
:dataA(0, fcblknm, 0)

// Parameters
READ  A  <- (brownum != -1 && !isTwoD) ? L POTRF( lcblknm ) : NULL

RW    C  <- (brownum == -1) ? NULL
         <- (brownum != -1) && (brownum == first) ? dataA( 0, fcblknm, 0 )
         <- (brownum != -1) && (brownum != first) ? C GEMM1D( prev )

         -> (brownum != -1) && (brownum == last)  ? L POTRF( fcblknm )
         -> (brownum != -1) && (brownum != last)  ? C GEMM1D( next )

; %{ return cblknbr - ((fcblknm + lcblknm) / 2 ) + last - brownum; %}

BODY
{
    /* If diagonal block, we skip */
    if ((brownum != -1) && !isTwoD) {
        SolverCblk *lcblk = datacode->cblktab + lcblknm;
        SolverCblk *fcblk = datacode->cblktab + fcblknm;
        SolverBlok *blok  = datacode->bloktab + bloknum;
        pastix_complex64_t *work;

        work = (pastix_complex64_t *)parsec_private_memory_pop( p_work );

        core_zgemmsp( PastixLower, PastixConjTrans, lcblk, blok, fcblk,
                      A, A, C, work, &lowrank );

        parsec_private_memory_push( p_work, (void *)work );
    }
}
END

OneToTwoD(k, m)

// Execution space
k    = cblkmin2d .. cblknbr

isTwoD  = %{ SolverCblk *cblk = datacode->cblktab + k;     return cblk->cblktype & CBLK_TASKS_2D; %}
fblokk  = %{ SolverCblk *cblk = datacode->cblktab + k;     return cblk->fblokptr - datacode->bloktab; %}
lblokk  = %{ SolverCblk *cblk = datacode->cblktab + k + 1; return cblk->fblokptr - datacode->bloktab - 1; %}
m       = 0 .. (isTwoD ? (lblokk-fblokk) : -1 )
noskip  = %{ if (m == 0) {
               return 1;
             }
             else {
               SolverBlok *blok = datacode->bloktab + fblokk + m - 1;
               return ( (blok[0].lcblknm == blok[1].lcblknm) &&
                        (blok[0].fcblknm == blok[1].fcblknm) ) ? 0 : 1+m;
             } %}

first   = %{ if (noskip) { SolverCblk *cblk = datacode->cblktab + k;     return cblk->brown2d; } else { return 0; }%}
last    = %{ if (noskip) { SolverCblk *cblk = datacode->cblktab + k + 1; return cblk->brownum; } else { return 0; }%}

// Parallel partitioning
:dataA(0, k, noskip)

// Parameters
/* C is A(k) if it's a leaf or get the cblk from the last update */
READ A <- isTwoD && noskip ? dataA(0, k, noskip) : NULL
       -> isTwoD && (first == last) && (m == 0) ? A POTRF2D( k )
       -> isTwoD && (first == last) && (m != 0) && noskip ? C TRSM2D( k, m )

       -> isTwoD && (first <  last) && noskip ? C GEMM2D( first, m, k )

CTL  ctl <- (isTwoD) ? ctl POTRF(k)

   //; %{ return - TASK_PRIONUM(k); %}
BODY
{
    /* fprintf(stderr, "k=%d, m=%d, isTwoD=%d, noskip=%d\n", */
    /*         k, m, isTwoD, noskip ); */
}
END

POTRF2D(k)

// Execution space
k       = cblkmin2d .. cblknbr
isTwoD  = %{ SolverCblk *cblk = datacode->cblktab + k;     return cblk->cblktype & CBLK_TASKS_2D; %}
fblokk  = %{ SolverCblk *cblk = datacode->cblktab + k;     return cblk->fblokptr - datacode->bloktab; %}
lblokk  = %{ SolverCblk *cblk = datacode->cblktab + k + 1; return cblk->fblokptr - datacode->bloktab - 1; %}

first   = %{ SolverCblk *cblk = datacode->cblktab + k;     return cblk->brown2d; %}
last    = %{ SolverCblk *cblk = datacode->cblktab + k + 1; return cblk->brownum; %}

// Parallel partitioning
:dataA(0, k, 1)

// Parameters
/* C is A(k) if it's a leaf or get the cblk from the last update */
READ  A   <-  isTwoD & (first == last) ? A OneToTwoD( k, 0 )
          <-  isTwoD & (first <  last) ? C GEMM2D( last-1, 0, k )
          <- !isTwoD ? NULL

          ->  isTwoD ? A TRSM2D( k, 1 .. (lblokk-fblokk) )
          ->  isTwoD ? dataA(0, k, 1)

//; %{ return - TASK_PRIONUM(k); %}
BODY
{
    if (isTwoD) {
        SolverCblk *cblk = datacode->cblktab + k;
        /* pastix_int_t  nbpivot = */
        core_zpotrfsp1d_potrf( cblk, A, sopalin_data->diagthreshold );
    }
}
END

TRSM2D(k, m)

     /* On all the 2D cblk */
k       = cblkmin2d .. cblknbr-1

isTwoD  = %{ SolverCblk *cblk = datacode->cblktab + k;     return cblk->cblktype & CBLK_TASKS_2D; %}
fblokk  = %{ SolverCblk *cblk = datacode->cblktab + k;     return cblk->fblokptr - datacode->bloktab; %}
lblokk  = %{ SolverCblk *cblk = datacode->cblktab + k + 1; return cblk->fblokptr - datacode->bloktab - 1; %}
m       = 1 .. (isTwoD ? (lblokk-fblokk) : 0 )

noskip  = %{ SolverBlok *blok = datacode->bloktab + fblokk + m - 1;
             return ( (blok[0].lcblknm == blok[1].lcblknm) &&
                      (blok[0].fcblknm == blok[1].fcblknm) ) ? 0 : 1+m; %}

first   = %{ if (noskip) { SolverCblk *cblk = datacode->cblktab + k;           return cblk->brown2d;                        } else { return 0; } %}
last    = %{ if (noskip) { SolverCblk *cblk = datacode->cblktab + k + 1;       return cblk->brownum;                        } else { return 0; } %}
fcblknm = %{ if (noskip) { SolverBlok *blok = datacode->bloktab + fblokk + m;  return blok->fcblknm;                        } else { return 0; } %}
browkb  = %{ if (noskip) { SolverBlok *blok = datacode->bloktab + fblokk + m;  return blok->browind;                        } else { return 0; } %}
fblokn  = %{ if (noskip) { SolverCblk *cblk = datacode->cblktab + fcblknm;     return cblk->fblokptr - datacode->bloktab;   } else { return 0; } %}
lblokn  = %{ if (noskip) { SolverCblk *cblk = datacode->cblktab + fcblknm + 1; return cblk->fblokptr - datacode->bloktab-1; } else { return 0; } %}

// Parallel partitioning
:dataA(0, k, noskip)

// Parameters
/* C is A(k) if it's a leaf or get the cblk from the last update */
READ  A   <-  isTwoD ? A POTRF2D( k ) : NULL

RW    C   <-  isTwoD & noskip & (first == last) ? A OneToTwoD( k, m )
          <-  isTwoD & noskip & (first <  last) ? C GEMM2D( last-1, m, k )
          <-(!isTwoD) | (!noskip) ? NULL
          ->  isTwoD & noskip ? A FWDTOGEMM2D(k, m, 1 .. m)
          ->  isTwoD & noskip ? B GEMM2D(browkb, 0 .. (lblokn-fblokn), fcblknm)
          ->  isTwoD & noskip ? dataA(0, k, noskip)

//; %{ return - TASK_PRIONUM(k); %}
BODY
{
    if (isTwoD && noskip) {
        SolverCblk *cblk = datacode->cblktab + k;
        if (cblk->cblktype & CBLK_COMPRESSED){
            core_ztrsmsp_2dlrsub( PastixLCoef, PastixRight, PastixLower,
                                  PastixConjTrans, PastixNonUnit,
                                  cblk, m, &lowrank );
        }
        else {
            core_ztrsmsp_2dsub( PastixRight, PastixLower, PastixConjTrans, PastixNonUnit,
                                cblk, m, A, C );
        }
   }
}
END

FWDTOGEMM2D(k, m, n)

// Execution space
k       = cblkmin2d .. cblknbr-1
isTwoD  = %{ SolverCblk *cblk = datacode->cblktab + k;     return cblk->cblktype & CBLK_TASKS_2D; %}
fblokk  = %{ SolverCblk *cblk = datacode->cblktab + k;     return cblk->fblokptr - datacode->bloktab; %}
lblokk  = %{ SolverCblk *cblk = datacode->cblktab + k + 1; return cblk->fblokptr - datacode->bloktab - 1; %}
m       = 1 .. (isTwoD ? (lblokk-fblokk) : 0 )
n       = 1 .. m

noskipM = %{ SolverBlok *blok = datacode->bloktab + fblokk + m - 1;
             return ( (blok[0].lcblknm == blok[1].lcblknm) &&
                      (blok[0].fcblknm == blok[1].fcblknm) ) ? 0 : 1+m; %}

noskipN = %{ SolverBlok *blok = datacode->bloktab + fblokk + n - 1;
             return ( (blok[0].lcblknm == blok[1].lcblknm) &&
                      (blok[0].fcblknm == blok[1].fcblknm) ) ? 0 : 1+n; %}

cblk_n  = %{ SolverBlok *blok = datacode->bloktab + fblokk + n;  return blok->fcblknm; %}
blok_mn = %{
    if( noskipM ) {
      SolverBlok *blokA = datacode->bloktab + fblokk + m;
      SolverCblk *cblkC = datacode->cblktab + cblk_n;
      SolverBlok *blokC = cblkC->fblokptr;
      pastix_int_t frownum = blokC->frownum;
      pastix_int_t lrownum = blokC->lrownum;
      pastix_int_t i = 0, j = 0;

      do {
          frownum = blokC->frownum;
          lrownum = blokC->lrownum;
          i += j;
          j = 1;

          while( (cblk_n < cblknbr) &&
                 (blokC[0].fcblknm == blokC[1].fcblknm) &&
                 (blokC[0].lcblknm == blokC[1].lcblknm) )
          {
              blokC++; j++;
              lrownum = blokC->lrownum;
          }
          blokC++;
      }
      while( !((blokA->frownum >= frownum) &&
               (blokA->lrownum <= lrownum)) );
      return i;
    }
    else
        return 0;
%}
browkb = %{ SolverBlok *blok = datacode->bloktab + fblokk + n;
            return blok->browind; %}

// Parallel partitioning
:dataA(0, cblk_n, blok_mn)

// Parameters
READ  A  <- noskipM ? C TRSM2D( k, m ) : NULL
         -> noskipM & noskipN ? A GEMM2D( browkb, blok_mn, cblk_n )

BODY
{
}
END


/**
 *       GEMM
 *
 * To have a contiguous range of GEMM to release in the potrf, they are numbered
 * with the indexes of the off-diagonal blocks, diagonal block included.
 * Thus, the diagonal block tasks which doesn't perfom computations are used as
 * DATA_IN tasks. This is mandatory when using the GPU, due to the versioning
 * bumped by the cpu version of the diagonal block that coccurs when computing
 * the diagonal blocks.
 *
 * For all off-diagonal blocks, it updates the trailing matrix with the panel
 * k-th block updating corresponding.
 *
 */
GEMM2D(k, blok_mn, cblk_n)

// Execution space
cblk_n  = cblkmin2d+1 .. cblknbr

is2dC   = %{ SolverCblk *cblk = datacode->cblktab + cblk_n; return (cblk->cblktype & CBLK_TASKS_2D); %}
fblokn  = %{ SolverCblk *cblk = datacode->cblktab + cblk_n;     return cblk->fblokptr - datacode->bloktab; %}
lblokn  = %{ SolverCblk *cblk = datacode->cblktab + cblk_n + 1; return cblk->fblokptr - datacode->bloktab - 1; %}
blok_mn = 0 .. (is2dC ? (lblokn-fblokn) : -1)

noskipC = %{ SolverBlok *blok = datacode->bloktab + fblokn + blok_mn - 1;
             return ( (blok[0].lcblknm == blok[1].lcblknm) &&
                      (blok[0].fcblknm == blok[1].fcblknm) ) ? 0 : 1+blok_mn; %}

first   = %{ if (noskipC) { SolverCblk *cblk = datacode->cblktab + cblk_n;     return cblk->brown2d;     }
             else { return 1; }%}
last    = %{ if (noskipC) { SolverCblk *cblk = datacode->cblktab + cblk_n + 1; return cblk->brownum - 1; }
             else { return 0; }%}
k       = first .. last

blok_nk = %{ pastix_int_t nk = datacode->browtab[ k ];
             SolverBlok *blok = datacode->bloktab + nk - 1;
             return ( (blok[0].lcblknm == blok[1].lcblknm) &&
                      (blok[0].fcblknm == blok[1].fcblknm) ) ? 0 : nk; %}

cblk_k  = %{ SolverBlok *blok = datacode->bloktab + blok_nk; return blok->lcblknm; %}
fblokk  = %{ SolverCblk *cblk = datacode->cblktab + cblk_k;  return cblk->fblokptr - datacode->bloktab; %}

is2dA   = %{ SolverCblk *cblk = datacode->cblktab + cblk_k; return (cblk->cblktype & CBLK_TASKS_2D); %}

blok_mk = %{
    if ( blok_nk == 0 ) {
       return 0;
    }
    else {
      SolverBlok *blokA = datacode->bloktab + blok_nk;
      SolverBlok *blokC = datacode->bloktab + fblokn + blok_mn;
      pastix_int_t i = (blokA - datacode->bloktab) - fblokk;

      /* Look for the first blokA that starts after the first blokC */
      while( (blokC->frownum > blokA->lrownum) && (blokA[0].lcblknm == blokA[1].lcblknm) )
      {
         blokA++; i++;
      }
      /* Check if blokA is matching any of the blokC considered together */
      while( (blokA->frownum > blokC->lrownum) &&
             (blokC[0].fcblknm == blokC[1].fcblknm) &&
             (blokC[0].lcblknm == blokC[1].lcblknm))
      {
         blokC++;
      }
      return is_block_inside_fblock( blokA, blokC ) ? i : 0;
    }
%}

todo = (is2dA && is2dC && noskipC && blok_nk && blok_mk)

// Parallel partitioning
:dataA(0, cblk_n, noskipC)

// Parameters
READ  A  <-  is2dA & (blok_mk > 0) ? A FWDTOGEMM2D( cblk_k, blok_mk, blok_nk-fblokk ) : NULL
READ  B  <-  is2dA & (blok_nk > 0) ? C TRSM2D( cblk_k, blok_nk-fblokk ) : NULL

RW    C  <- (k == first) ? A OneToTwoD( cblk_n, blok_mn )
         <- (k != first) ? C GEMM2D( k-1, blok_mn, cblk_n )

         -> (last == k) & (blok_mn == 0) ? A POTRF2D( cblk_n )
         -> (last == k) & (blok_mn != 0) ? C TRSM2D( cblk_n, blok_mn )
         -> (last != k) ? C GEMM2D( k+1, blok_mn, cblk_n )

//; %{ return - TASK_PRIONUM(fcblk); %}

BODY
{
    /* is2dA && is2dC && noskipC && blok_nk && blok_mk */
    if (todo) {
        SolverCblk *cblk  = datacode->cblktab + cblk_k;
        SolverCblk *fcblk = datacode->cblktab + cblk_n;

        /* Don't do anything if one is null */
        assert(A && B && C);

        /* Skip the update on diagonal block if upper part */
        if ((cblk->cblktype  & CBLK_COMPRESSED) &&
            (fcblk->cblktype & CBLK_COMPRESSED))
        {
            core_zgemmsp_2dlrsub( PastixLCoef, PastixUpperLower, PastixConjTrans,
                                  blok_mk, blok_nk-fblokk, blok_mn,
                                  cblk, fcblk,
                                  &lowrank );
        }
        else {
            assert( (!(cblk->cblktype  & CBLK_COMPRESSED)) &&
                    (!(fcblk->cblktype & CBLK_COMPRESSED)) );
            core_zgemmsp_2d2dsub( PastixLower, PastixConjTrans,
                                  blok_mk, blok_nk-fblokk, blok_mn,
                                  cblk, fcblk,
                                  A, B, C );
        }
    }
}
END
