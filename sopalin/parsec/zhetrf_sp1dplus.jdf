extern "C" %{
    /**
     * PLASMA include for defined and constants.
     *
     * @precisions normal z -> c
     *
     */
#include <parsec.h>
#include <parsec/data_distribution.h>
#include <parsec/private_mempool.h>
#include "common.h"
#include "solver.h"
#include "pastix_zcores.h"
#include "sopalin_data.h"

%}

/* Globals
 */
descA        [type = "sparse_matrix_desc_t *" ]
sopalin_data [type = "sopalin_data_t *" ]

datacode  [type = "SolverMatrix*"         hidden = on default = "(sopalin_data->solvmtx)"       ]
cblknbr   [type = "pastix_int_t"          hidden = on default = "(datacode->cblknbr - 1)"       ]
bloknbr   [type = "pastix_int_t"          hidden = on default = "(datacode->bloknbr - 2)"       ]
lowrank   [type = "pastix_lr_t"           hidden = on default = "(sopalin_data->solvmtx->lowrank)"]

p_work1  [type = "parsec_memory_pool_t *" size = "pastix_imax(datacode->gemmmax, datacode->diagmax) * sizeof(pastix_complex64_t)"]
p_work2  [type = "parsec_memory_pool_t *" size = "datacode->gemmmax * sizeof(pastix_complex64_t)"]

/**************************************************
 *                HETRF_TRSM                      *
 * panel factorization: do trf of diagonal and    *
 *                    : trsm on off-diagonal      *
 **************************************************/
HETRF_TRSM(k) [high_priority = on]

// Execution space
k = 0 .. cblknbr

browk0    = inline_c %{ SolverCblk *cblk = datacode->cblktab + k;     return cblk->brownum; %}
browk1    = inline_c %{ SolverCblk *cblk = datacode->cblktab + k + 1; return cblk->brownum; %}
firstblok = inline_c %{ SolverCblk *cblk = datacode->cblktab + k;     return cblk->fblokptr - datacode->bloktab + 1; %}
lastblok  = inline_c %{ SolverCblk *cblk = datacode->cblktab + k + 1; return cblk->fblokptr - datacode->bloktab - 1; %}
lastbrow  = inline_c %{ if ( browk0 == browk1 ) return 0; else return datacode->browtab[ browk1 - 1 ]; %}

// Parallel partitioning
:dataA(0, k, 0) // Should match SOLV_COEFTAB(k)

// Parameters
/* C is A(k) if it's a leaf or get the cblk from the last update */
RW L <- ( browk0 == browk1 ) ? dataA(0, k, 0) : C GEMM( lastbrow )
     -> A GEMM(firstblok .. lastblok)
     -> dataA(0, k, 0)

     //; inline_c %{ return - TASK_PRIONUM(k); %}
BODY
{
    SolverCblk *cblk = datacode->cblktab + k;
    pastix_complex64_t *work1;

    work1 = (pastix_complex64_t *)parsec_private_memory_pop( p_work1 );

    core_zhetrfsp1d_panel( cblk, L, sopalin_data->diagthreshold, work1 );

    parsec_private_memory_push( p_work1, (void *)work1 );
}
END

/**************************************************
 *                      GEMM                      *
 * update the trailing matrix with the panel      *
 * k-th block updating corresponding.
 **************************************************/

GEMM(bloknum)

// Execution space
bloknum = 1 .. bloknbr

lcblknm = inline_c %{ SolverBlok *blok = datacode->bloktab + bloknum;     return blok->lcblknm; %}
fcblknm = inline_c %{ SolverBlok *blok = datacode->bloktab + bloknum;     return blok->fcblknm; %}
first   = inline_c %{ SolverCblk *cblk = datacode->cblktab + fcblknm;     return cblk->brownum; %}
last    = inline_c %{ SolverCblk *cblk = datacode->cblktab + fcblknm + 1; return cblk->brownum - 1; %}

brownum = inline_c %{ return datacode->bloktab[bloknum].browind; %}
prev    = inline_c %{ if ((brownum == -1) || (brownum <= first)) return 0; else return datacode->browtab[brownum-1]; %}
next    = inline_c %{ if ((brownum == -1) || (brownum >= last )) return 0; else return datacode->browtab[brownum+1]; %}

// Parallel partitioning
:dataA(0, fcblknm, 0)

// Parameters
READ  A  <- ( brownum != -1) ? L HETRF_TRSM( lcblknm ) : dataA( 0, fcblknm, 0 )

RW    C  <- ( brownum == -1 ) || (first == brownum ) ? dataA( 0, fcblknm, 0 )
         <- ( brownum != -1 ) && (first != brownum ) ? C GEMM( prev )

         -> ( brownum != -1 ) && (last == brownum ) ? L HETRF_TRSM( fcblknm )
         -> ( brownum != -1 ) && (last != brownum ) ? C GEMM( next )

//; inline_c %{ return - TASK_PRIONUM(fcblk); %}

BODY
{
    /* If diagonal block, we skip */
    if (brownum == -1) {
        goto end;
    }

    SolverCblk *lcblk = datacode->cblktab + lcblknm;
    SolverCblk *fcblk = datacode->cblktab + fcblknm;
    SolverBlok *blok  = datacode->bloktab + bloknum;
    pastix_complex64_t *work1, *work2;

    work1 = (pastix_complex64_t *)parsec_private_memory_pop( p_work1 );
    work2 = (pastix_complex64_t *)parsec_private_memory_pop( p_work2 );

    core_zhetrfsp1d_gemm( lcblk, blok, fcblk, A, C, work1, work2 );

    parsec_private_memory_push( p_work1, (void *)work1 );
    parsec_private_memory_push( p_work2, (void *)work2 );
  end:
    ;
}
END
